package br.com.castgroup.cursos.service;

import java.time.LocalDate;
import java.util.Optional;

import javax.transaction.Transactional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import br.com.castgroup.cursos.entities.Categoria;
import br.com.castgroup.cursos.entities.Curso;
import br.com.castgroup.cursos.entities.Log;
import br.com.castgroup.cursos.repository.CategoriaRepository;
import br.com.castgroup.cursos.repository.CursoRepository;
import br.com.castgroup.cursos.repository.LogRepository;
import br.com.castgroup.cursos.repository.UsuarioRepository;

@Service
public class CursoService {

	@Autowired
	UsuarioRepository usuarioRepository;

	@Autowired
	LogRepository logRepository;

	@Autowired
	CursoRepository cursoRepository;

	@Autowired
	CategoriaRepository categoriaRepository;

	private String message = null;

	public String mensagem() {
		return message;
	}

	@Transactional
	public void cadastrarCurso(Curso curso) {
		validaData(curso);
		existeCategoria(curso, categoriaRepository);
		Log log = new Log(null, LocalDate.now(), LocalDate.now(), curso, usuarioRepository.getById(1));
		curso.setInclusao(LocalDate.now());
		logRepository.save(log);
		cursoRepository.save(curso);
	}

	private void existeCategoria(Curso request, CategoriaRepository categoriaRepository) {
		Optional<Categoria> categoria = categoriaRepository.findById(request.getCategoria().getId_categoria());
		if (categoria.isEmpty()) {
			throw new RuntimeException("Não existe a categoria informada");
		}
	}

	private void validaData(Curso request) {
		if (request.getInicio().isBefore(LocalDate.now())) {
			throw new RuntimeException("Data de inicio anterior a data atual");
		}
		if (request.getInicio().isAfter(request.getTermino())) {
			throw new RuntimeException("Inicio depois do fim");
		}
		if (cursoRepository.contador(request.getInicio(), request.getTermino()) > 0) {
			throw new RuntimeException("Já existe curso nessa data");
		}
	}

	@Transactional
	public void atualizarCurso(Curso curso, Integer id_curso) {					
		validaData(curso);
		existeCategoria(curso, categoriaRepository);
		Log log = new Log(null, curso.getInclusao(), LocalDate.now(), curso, usuarioRepository.getById(1));
		logRepository.save(log);
		cursoRepository.save(cursoExiste(curso, id_curso));
	}

	public Curso cursoExiste(Curso curso, Integer id_curso) {
		Optional<Curso> item = cursoRepository.findById(id_curso);
		if (item.isEmpty()) {
			throw new RuntimeException("Curso não encontrado");
		} else {
			curso = item.get();
			return curso;
		}
	
	}

	public void finalizado(Curso curso) {
		if (curso.getTermino().isBefore(LocalDate.now())) {
			curso.setFinalizado(true);
		} else {
			curso.setFinalizado(false);
		}
	}

}
